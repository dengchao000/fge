/*
** Author:	邓超
** QQ:		23427470
** Time:	

** Fly Game 2
** Copyright (C) 2005-2007, Fantasy Games
** Kernel functions
*/



#pragma once
#include <assert.h>
#include <vector>
namespace fge
{
	/*************************************************************************************
	* 池：是一种数组,将一组对象集中存放,插入删除时不保证数组中数据的顺序
	***************************************************************************************/
	template<typename T>
	class Pool
	{
	public:
		//构造函数
		Pool()
		{	
		}
		virtual ~Pool(void)
		{
		}
		/*************************************************************************************
		* 函数功能 ：重载下标运算，能通过[]直接偏移到相应的元素位置。
		* 参    数 ：index	in 欲查找的元素下标
		* 返 回 值 ：T& 
		* 异常	   ：无。
		* 注意	   ：此操作不保证多线程安全。
		***************************************************************************************/
		T& operator[](size_t index)
		{			
			return m_vector[index];
		}

		/*************************************************************************************
		* 函数功能 ：将数组内数据全部清空
		***************************************************************************************/
		void	Clear()
		{			
			m_vector.clear( );
		}

		/*************************************************************************************
		* 函数功能 ：添加元素
		* 参    数 ：
		* 返 回 值 ：如果已满则 throw std::exception("Pool Full");
		***************************************************************************************/
		void	Push(const T& t)
		{
			//if(m_count >= m_size)
			//	return throw std::exception("Pool Full");
			//m_pData[m_count++] = t;	
			m_vector.push_back( t );
		}

		/*************************************************************************************
		* 函数功能 ：删除
		* 参    数 ：
		* 返 回 值 ：失败返回0
		***************************************************************************************/
		T&		Pop(size_t index)
		{
			T& ref = m_vector[index];
			m_vector[index] = m_vector.back( );
			m_vector.pop_back( );
			return ref;
		}
		/*************************************************************************************
		* 函数功能 ：返回已使用元素的总共个数
		**************************************************************************************/
		size_t	Size()	const 
		{
			return m_vector.size();
		}

		/*************************************************************************************
		* 函数功能 ：返回整个数组的大小
		**************************************************************************************/
		size_t	Capacity() const 
		{// return current length of allocated storage
			return m_vector.capacity( );
		}	

	private:
		//size_t		m_size;				//整个数组大小
		//T				*m_pData;			//数组数据
		//size_t		m_count;			//总共已使用节点的总数		
		std::vector< T > m_vector;
	};

};